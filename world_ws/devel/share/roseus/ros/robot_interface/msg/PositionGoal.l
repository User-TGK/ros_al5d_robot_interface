;; Auto-generated. Do not edit!


(when (boundp 'robot_interface::PositionGoal)
  (if (not (find-package "ROBOT_INTERFACE"))
    (make-package "ROBOT_INTERFACE"))
  (shadow 'PositionGoal (find-package "ROBOT_INTERFACE")))
(unless (find-package "ROBOT_INTERFACE::POSITIONGOAL")
  (make-package "ROBOT_INTERFACE::POSITIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude PositionGoal.msg.html


(defclass robot_interface::PositionGoal
  :super ros::object
  :slots (_preProgrammed _position _id _maxTime _name ))

(defmethod robot_interface::PositionGoal
  (:init
   (&key
    ((:preProgrammed __preProgrammed) nil)
    ((:position __position) (make-array 0 :initial-element 0 :element-type :integer))
    ((:id __id) (make-array 0 :initial-element 0 :element-type :integer))
    ((:maxTime __maxTime) 0)
    ((:name __name) "")
    )
   (send-super :init)
   (setq _preProgrammed __preProgrammed)
   (setq _position __position)
   (setq _id __id)
   (setq _maxTime (round __maxTime))
   (setq _name (string __name))
   self)
  (:preProgrammed
   (&optional __preProgrammed)
   (if __preProgrammed (setq _preProgrammed __preProgrammed)) _preProgrammed)
  (:position
   (&optional __position)
   (if __position (setq _position __position)) _position)
  (:id
   (&optional __id)
   (if __id (setq _id __id)) _id)
  (:maxTime
   (&optional __maxTime)
   (if __maxTime (setq _maxTime __maxTime)) _maxTime)
  (:name
   (&optional __name)
   (if __name (setq _name __name)) _name)
  (:serialization-length
   ()
   (+
    ;; bool _preProgrammed
    1
    ;; int16[] _position
    (* 2    (length _position)) 4
    ;; uint16[] _id
    (* 2    (length _id)) 4
    ;; uint64 _maxTime
    8
    ;; string _name
    4 (length _name)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; bool _preProgrammed
       (if _preProgrammed (write-byte -1 s) (write-byte 0 s))
     ;; int16[] _position
     (write-long (length _position) s)
     (dotimes (i (length _position))
       (write-word (elt _position i) s)
       )
     ;; uint16[] _id
     (write-long (length _id) s)
     (dotimes (i (length _id))
       (write-word (elt _id i) s)
       )
     ;; uint64 _maxTime
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _maxTime (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _maxTime) (= (length (_maxTime . bv)) 2)) ;; bignum
              (write-long (ash (elt (_maxTime . bv) 0) 0) s)
              (write-long (ash (elt (_maxTime . bv) 1) -1) s))
             ((and (class _maxTime) (= (length (_maxTime . bv)) 1)) ;; big1
              (write-long (elt (_maxTime . bv) 0) s)
              (write-long (if (>= _maxTime 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _maxTime s)(write-long (if (>= _maxTime 0) 0 #xffffffff) s)))
     ;; string _name
       (write-long (length _name) s) (princ _name s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; bool _preProgrammed
     (setq _preProgrammed (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; int16[] _position
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _position (instantiate integer-vector n))
     (dotimes (i n)
     (setf (elt _position i) (sys::peek buf ptr- :short)) (incf ptr- 2)
     ))
   ;; uint16[] _id
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _id (instantiate integer-vector n))
     (dotimes (i n)
     (setf (elt _id i) (sys::peek buf ptr- :short)) (incf ptr- 2)
     ))
   ;; uint64 _maxTime
     
#+(or :alpha :irix6 :x86_64)
      (setf _maxTime (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _maxTime (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;; string _name
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _name (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;;
   self)
  )

(setf (get robot_interface::PositionGoal :md5sum-) "86420113f433e06cdfdcc61a54beacb3")
(setf (get robot_interface::PositionGoal :datatype-) "robot_interface/PositionGoal")
(setf (get robot_interface::PositionGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
bool     preProgrammed
int16[]  position 
uint16[] id
uint64   maxTime
string   name

")



(provide :robot_interface/PositionGoal "86420113f433e06cdfdcc61a54beacb3")


